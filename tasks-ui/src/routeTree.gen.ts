/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AutonomousImport } from './routes/autonomous'
import { Route as AssistantImport } from './routes/assistant'
import { Route as IndexImport } from './routes/index'
import { Route as WorkflowIndexImport } from './routes/workflow/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as ParentsIndexImport } from './routes/parents/index'
import { Route as WorkflowStateImport } from './routes/workflow/$state'
import { Route as TasksTaskIdImport } from './routes/tasks/$taskId'
import { Route as ParentsParentIdImport } from './routes/parents/$parentId'
import { Route as TasksParentIdSubtaskIdImport } from './routes/tasks/$parentId/$subtaskId'
import { Route as ParentsParentIdSubtaskIdImport } from './routes/parents/$parentId.$subtaskId'

// Create/Update Routes

const AutonomousRoute = AutonomousImport.update({
  id: '/autonomous',
  path: '/autonomous',
  getParentRoute: () => rootRoute,
} as any)

const AssistantRoute = AssistantImport.update({
  id: '/assistant',
  path: '/assistant',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkflowIndexRoute = WorkflowIndexImport.update({
  id: '/workflow/',
  path: '/workflow/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const ParentsIndexRoute = ParentsIndexImport.update({
  id: '/parents/',
  path: '/parents/',
  getParentRoute: () => rootRoute,
} as any)

const WorkflowStateRoute = WorkflowStateImport.update({
  id: '/workflow/$state',
  path: '/workflow/$state',
  getParentRoute: () => rootRoute,
} as any)

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any)

const ParentsParentIdRoute = ParentsParentIdImport.update({
  id: '/parents/$parentId',
  path: '/parents/$parentId',
  getParentRoute: () => rootRoute,
} as any)

const TasksParentIdSubtaskIdRoute = TasksParentIdSubtaskIdImport.update({
  id: '/tasks/$parentId/$subtaskId',
  path: '/tasks/$parentId/$subtaskId',
  getParentRoute: () => rootRoute,
} as any)

const ParentsParentIdSubtaskIdRoute = ParentsParentIdSubtaskIdImport.update({
  id: '/$subtaskId',
  path: '/$subtaskId',
  getParentRoute: () => ParentsParentIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/assistant': {
      id: '/assistant'
      path: '/assistant'
      fullPath: '/assistant'
      preLoaderRoute: typeof AssistantImport
      parentRoute: typeof rootRoute
    }
    '/autonomous': {
      id: '/autonomous'
      path: '/autonomous'
      fullPath: '/autonomous'
      preLoaderRoute: typeof AutonomousImport
      parentRoute: typeof rootRoute
    }
    '/parents/$parentId': {
      id: '/parents/$parentId'
      path: '/parents/$parentId'
      fullPath: '/parents/$parentId'
      preLoaderRoute: typeof ParentsParentIdImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof rootRoute
    }
    '/workflow/$state': {
      id: '/workflow/$state'
      path: '/workflow/$state'
      fullPath: '/workflow/$state'
      preLoaderRoute: typeof WorkflowStateImport
      parentRoute: typeof rootRoute
    }
    '/parents/': {
      id: '/parents/'
      path: '/parents'
      fullPath: '/parents'
      preLoaderRoute: typeof ParentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
    '/workflow/': {
      id: '/workflow/'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof WorkflowIndexImport
      parentRoute: typeof rootRoute
    }
    '/parents/$parentId/$subtaskId': {
      id: '/parents/$parentId/$subtaskId'
      path: '/$subtaskId'
      fullPath: '/parents/$parentId/$subtaskId'
      preLoaderRoute: typeof ParentsParentIdSubtaskIdImport
      parentRoute: typeof ParentsParentIdImport
    }
    '/tasks/$parentId/$subtaskId': {
      id: '/tasks/$parentId/$subtaskId'
      path: '/tasks/$parentId/$subtaskId'
      fullPath: '/tasks/$parentId/$subtaskId'
      preLoaderRoute: typeof TasksParentIdSubtaskIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ParentsParentIdRouteChildren {
  ParentsParentIdSubtaskIdRoute: typeof ParentsParentIdSubtaskIdRoute
}

const ParentsParentIdRouteChildren: ParentsParentIdRouteChildren = {
  ParentsParentIdSubtaskIdRoute: ParentsParentIdSubtaskIdRoute,
}

const ParentsParentIdRouteWithChildren = ParentsParentIdRoute._addFileChildren(
  ParentsParentIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents/': typeof ParentsIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/workflow/': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents'
    | '/tasks'
    | '/workflow'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents'
    | '/tasks'
    | '/workflow'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  id:
    | '__root__'
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents/'
    | '/tasks/'
    | '/workflow/'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssistantRoute: typeof AssistantRoute
  AutonomousRoute: typeof AutonomousRoute
  ParentsParentIdRoute: typeof ParentsParentIdRouteWithChildren
  TasksTaskIdRoute: typeof TasksTaskIdRoute
  WorkflowStateRoute: typeof WorkflowStateRoute
  ParentsIndexRoute: typeof ParentsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  WorkflowIndexRoute: typeof WorkflowIndexRoute
  TasksParentIdSubtaskIdRoute: typeof TasksParentIdSubtaskIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssistantRoute: AssistantRoute,
  AutonomousRoute: AutonomousRoute,
  ParentsParentIdRoute: ParentsParentIdRouteWithChildren,
  TasksTaskIdRoute: TasksTaskIdRoute,
  WorkflowStateRoute: WorkflowStateRoute,
  ParentsIndexRoute: ParentsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  WorkflowIndexRoute: WorkflowIndexRoute,
  TasksParentIdSubtaskIdRoute: TasksParentIdSubtaskIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/assistant",
        "/autonomous",
        "/parents/$parentId",
        "/tasks/$taskId",
        "/workflow/$state",
        "/parents/",
        "/tasks/",
        "/workflow/",
        "/tasks/$parentId/$subtaskId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/assistant": {
      "filePath": "assistant.tsx"
    },
    "/autonomous": {
      "filePath": "autonomous.tsx"
    },
    "/parents/$parentId": {
      "filePath": "parents/$parentId.tsx",
      "children": [
        "/parents/$parentId/$subtaskId"
      ]
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId.tsx"
    },
    "/workflow/$state": {
      "filePath": "workflow/$state.tsx"
    },
    "/parents/": {
      "filePath": "parents/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    },
    "/workflow/": {
      "filePath": "workflow/index.tsx"
    },
    "/parents/$parentId/$subtaskId": {
      "filePath": "parents/$parentId.$subtaskId.tsx",
      "parent": "/parents/$parentId"
    },
    "/tasks/$parentId/$subtaskId": {
      "filePath": "tasks/$parentId/$subtaskId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
