/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AutonomousRouteImport } from './routes/autonomous'
import { Route as AssistantRouteImport } from './routes/assistant'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkflowIndexRouteImport } from './routes/workflow/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as ParentsIndexRouteImport } from './routes/parents/index'
import { Route as WorkflowStateRouteImport } from './routes/workflow/$state'
import { Route as TasksTaskIdRouteImport } from './routes/tasks/$taskId'
import { Route as ParentsParentIdRouteImport } from './routes/parents/$parentId'
import { Route as TasksParentIdSubtaskIdRouteImport } from './routes/tasks/$parentId/$subtaskId'
import { Route as ParentsParentIdSubtaskIdRouteImport } from './routes/parents/$parentId.$subtaskId'

const AutonomousRoute = AutonomousRouteImport.update({
  id: '/autonomous',
  path: '/autonomous',
  getParentRoute: () => rootRouteImport,
} as any)
const AssistantRoute = AssistantRouteImport.update({
  id: '/assistant',
  path: '/assistant',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowIndexRoute = WorkflowIndexRouteImport.update({
  id: '/workflow/',
  path: '/workflow/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const ParentsIndexRoute = ParentsIndexRouteImport.update({
  id: '/parents/',
  path: '/parents/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkflowStateRoute = WorkflowStateRouteImport.update({
  id: '/workflow/$state',
  path: '/workflow/$state',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTaskIdRoute = TasksTaskIdRouteImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRouteImport,
} as any)
const ParentsParentIdRoute = ParentsParentIdRouteImport.update({
  id: '/parents/$parentId',
  path: '/parents/$parentId',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksParentIdSubtaskIdRoute = TasksParentIdSubtaskIdRouteImport.update({
  id: '/tasks/$parentId/$subtaskId',
  path: '/tasks/$parentId/$subtaskId',
  getParentRoute: () => rootRouteImport,
} as any)
const ParentsParentIdSubtaskIdRoute =
  ParentsParentIdSubtaskIdRouteImport.update({
    id: '/$subtaskId',
    path: '/$subtaskId',
    getParentRoute: () => ParentsParentIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/autonomous': typeof AutonomousRoute
  '/parents/$parentId': typeof ParentsParentIdRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRoute
  '/workflow/$state': typeof WorkflowStateRoute
  '/parents/': typeof ParentsIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/workflow/': typeof WorkflowIndexRoute
  '/parents/$parentId/$subtaskId': typeof ParentsParentIdSubtaskIdRoute
  '/tasks/$parentId/$subtaskId': typeof TasksParentIdSubtaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents'
    | '/tasks'
    | '/workflow'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents'
    | '/tasks'
    | '/workflow'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  id:
    | '__root__'
    | '/'
    | '/assistant'
    | '/autonomous'
    | '/parents/$parentId'
    | '/tasks/$taskId'
    | '/workflow/$state'
    | '/parents/'
    | '/tasks/'
    | '/workflow/'
    | '/parents/$parentId/$subtaskId'
    | '/tasks/$parentId/$subtaskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssistantRoute: typeof AssistantRoute
  AutonomousRoute: typeof AutonomousRoute
  ParentsParentIdRoute: typeof ParentsParentIdRouteWithChildren
  TasksTaskIdRoute: typeof TasksTaskIdRoute
  WorkflowStateRoute: typeof WorkflowStateRoute
  ParentsIndexRoute: typeof ParentsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  WorkflowIndexRoute: typeof WorkflowIndexRoute
  TasksParentIdSubtaskIdRoute: typeof TasksParentIdSubtaskIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/autonomous': {
      id: '/autonomous'
      path: '/autonomous'
      fullPath: '/autonomous'
      preLoaderRoute: typeof AutonomousRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assistant': {
      id: '/assistant'
      path: '/assistant'
      fullPath: '/assistant'
      preLoaderRoute: typeof AssistantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflow/': {
      id: '/workflow/'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof WorkflowIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parents/': {
      id: '/parents/'
      path: '/parents'
      fullPath: '/parents'
      preLoaderRoute: typeof ParentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workflow/$state': {
      id: '/workflow/$state'
      path: '/workflow/$state'
      fullPath: '/workflow/$state'
      preLoaderRoute: typeof WorkflowStateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parents/$parentId': {
      id: '/parents/$parentId'
      path: '/parents/$parentId'
      fullPath: '/parents/$parentId'
      preLoaderRoute: typeof ParentsParentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/$parentId/$subtaskId': {
      id: '/tasks/$parentId/$subtaskId'
      path: '/tasks/$parentId/$subtaskId'
      fullPath: '/tasks/$parentId/$subtaskId'
      preLoaderRoute: typeof TasksParentIdSubtaskIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/parents/$parentId/$subtaskId': {
      id: '/parents/$parentId/$subtaskId'
      path: '/$subtaskId'
      fullPath: '/parents/$parentId/$subtaskId'
      preLoaderRoute: typeof ParentsParentIdSubtaskIdRouteImport
      parentRoute: typeof ParentsParentIdRoute
    }
  }
}

interface ParentsParentIdRouteChildren {
  ParentsParentIdSubtaskIdRoute: typeof ParentsParentIdSubtaskIdRoute
}

const ParentsParentIdRouteChildren: ParentsParentIdRouteChildren = {
  ParentsParentIdSubtaskIdRoute: ParentsParentIdSubtaskIdRoute,
}

const ParentsParentIdRouteWithChildren = ParentsParentIdRoute._addFileChildren(
  ParentsParentIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssistantRoute: AssistantRoute,
  AutonomousRoute: AutonomousRoute,
  ParentsParentIdRoute: ParentsParentIdRouteWithChildren,
  TasksTaskIdRoute: TasksTaskIdRoute,
  WorkflowStateRoute: WorkflowStateRoute,
  ParentsIndexRoute: ParentsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  WorkflowIndexRoute: WorkflowIndexRoute,
  TasksParentIdSubtaskIdRoute: TasksParentIdSubtaskIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
