#!/bin/bash

# Enhanced prototype dispatcher using Gum for better UX
# Requires: brew install gum (or other package manager)

# Configuration
SESSION_NAME="scopecraft"

# Check if gum is installed
check_gum() {
    if ! command -v gum &> /dev/null; then
        echo "Error: gum is not installed"
        echo "Install with: brew install gum"
        exit 1
    fi
}

# Check if tmux is installed
check_tmux() {
    if ! command -v tmux &> /dev/null; then
        gum style --foreground 196 "Error: tmux is not installed"
        exit 1
    fi
}

# Check if channelcoder is installed
check_channelcoder() {
    if ! command -v channelcoder &> /dev/null; then
        gum style --foreground 196 "Error: channelcoder is not installed"
        gum style --foreground 245 "Install with: npm install -g channelcoder"
        exit 1
    fi
}

# Create or get the main tmux session
create_or_get_session() {
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        gum spin --spinner dot --title "Creating tmux session: $SESSION_NAME" -- \
            tmux new-session -d -s "$SESSION_NAME"
        
        # Set global session options for all windows
        tmux set-option -g -t "$SESSION_NAME" automatic-rename off
        tmux set-option -g -t "$SESSION_NAME" allow-rename off
    else
        gum style --foreground 82 "Using existing tmux session: $SESSION_NAME"
    fi
}

# Create a window for the task
create_window() {
    local mode=$1
    local task_id=$2
    local window_name="${task_id}-${mode}"
    
    # Always use tw-start for any ID (removed feature detection)
    gum style --foreground 245 "Setting up task worktree for $task_id..."
    local worktree_output=$(bun run tw-start "$task_id" 2>/dev/null | tail -n 1)
    
    # Check if the output contains a valid path
    if [[ -d "$worktree_output" ]]; then
        local worktree_path="$worktree_output"
        gum style --foreground 82 "✓ Using worktree: $worktree_path"
    else
        gum style --foreground 196 "Error: Failed to create/find worktree for $task_id"
        gum style --foreground 245 "Make sure ID exists and is not already started in another worktree"
        return 1
    fi
    
    # Check if window already exists
    if tmux list-windows -t "$SESSION_NAME" -F "#{window_name}" | grep -q "^${window_name}$"; then
        gum style --foreground 214 "Window already exists: $window_name"
        
        if gum confirm "Switch to existing window?"; then
            tmux select-window -t "$SESSION_NAME:${window_name}"
            return 0
        else
            return 1
        fi
    else
        gum spin --spinner dot --title "Creating window: $window_name" -- sleep 1
        
        # Create window with channelcoder command
        local user_prompt="${@:3}"
        
        # Disable automatic renaming for the window
        if [ "$mode" = "none" ]; then
            tmux new-window -t "$SESSION_NAME" -n "$window_name" -c "$worktree_path" "claude"
        else
            # Use channelcoder with the mode prompt
            tmux new-window -t "$SESSION_NAME" -n "$window_name" -c "$worktree_path" \
                "channelcoder .tasks/.modes/$mode/base.md -d mode=\"$mode\" -d taskId=\"$task_id\" -d additionalInstructions=\"$user_prompt\""
        fi
        
        # Disable automatic window renaming
        tmux set-window-option -t "$SESSION_NAME:$window_name" automatic-rename off
        tmux set-window-option -t "$SESSION_NAME:$window_name" allow-rename off
        
        gum style --foreground 82 "✓ Window created successfully"
    fi
}

# Attach to the session
attach_session() {
    local terminal=$(gum choose --header "Select terminal:" \
        "WezTerm" \
        "iTerm2" \
        "Terminal.app" \
        "Gnome Terminal" \
        "Manual (show command)")
    
    case $terminal in
        "WezTerm")
            wezterm start -- tmux attach-session -t "$SESSION_NAME"
            ;;
        "iTerm2")
            osascript -e "tell application \"iTerm\" to create window with default profile command \"tmux attach-session -t $SESSION_NAME\""
            ;;
        "Terminal.app")
            osascript -e "tell application \"Terminal\" to do script \"tmux attach-session -t $SESSION_NAME\""
            ;;
        "Gnome Terminal")
            gnome-terminal -- tmux attach-session -t "$SESSION_NAME"
            ;;
        "Manual (show command)")
            gum style --border normal --padding 1 "tmux attach-session -t $SESSION_NAME"
            ;;
    esac
}

# List active sessions with formatting
list_active() {
    gum style --border rounded --padding 1 --width 50 \
        "$(echo -e "Active Claude Sessions\n$(printf '=%.0s' {1..30})")"
    
    local windows=$(tmux list-windows -t "$SESSION_NAME" -F "#{window_name}|#{window_active}" 2>/dev/null)
    
    if [ -z "$windows" ]; then
        gum style --foreground 245 "No active sessions"
    else
        echo "$windows" | while IFS='|' read -r name active; do
            if [ "$active" = "1" ]; then
                gum style --foreground 82 --bold "▶ $name (active)"
            else
                gum style --foreground 245 "  $name"
            fi
        done
    fi
}

# Interactive mode selection
select_mode() {
    # Find the .tasks/.modes directory - use relative path
    local modes_dir=".tasks/.modes"
    
    if [ ! -d "$modes_dir" ]; then
        gum style --foreground 196 "Error: Modes directory not found at $modes_dir"
        return 1
    fi
    
    # Get all directories in .modes
    local modes=$(find "$modes_dir" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null | sort)
    
    if [ -z "$modes" ]; then
        gum style --foreground 196 "No mode directories found in $modes_dir"
        return 1
    fi
    
    # Add "none" as first option, then list all mode directories
    echo -e "none\n$modes" | gum choose --header "Select mode (or 'none' for basic Claude):"
}

# Interactive task ID input
get_task_id() {
    gum input --placeholder "Enter task ID (e.g., TASK-123, AUTH-001)" \
        --prompt "ID: " \
        --width 40
}

# Interactive user prompt input
get_user_prompt() {
    local mode=$1
    
    # Skip prompt input for "none" mode
    if [ "$mode" = "none" ]; then
        return
    fi
    
    gum style --foreground 245 "Optional: Add additional instructions for $mode mode"
    gum input --placeholder "Press Enter to skip or type additional instructions" \
        --prompt "Instructions: " \
        --width 80
}

# Main interactive flow
interactive_dispatch() {
    gum style --border double --padding 1 --width 50 \
        "Task-Aware Claude Sessions"
    
    local mode=$(select_mode)
    [ -z "$mode" ] && exit 0
    
    local task_id=$(get_task_id)
    [ -z "$task_id" ] && exit 0
    
    # Validate ID format - very permissive to allow various formats
    if [[ ! $task_id =~ ^[A-Za-z][A-Za-z0-9_-]+ ]]; then
        gum style --foreground 196 "Invalid ID format"
        exit 1
    fi
    
    # Get optional user prompt
    local user_prompt=$(get_user_prompt "$mode")
    
    # Show summary
    gum style --border normal --padding 1 \
        "$(echo -e "Mode: $mode\nTask: $task_id\nInstructions: ${user_prompt:-[none]}")"
    
    if gum confirm "Proceed with dispatch?"; then
        create_or_get_session
        create_window "$mode" "$task_id" "$user_prompt"
        
        if gum confirm "Attach to session now?"; then
            attach_session
        fi
    fi
}

# Quick status check
quick_status() {
    local task_id=$(get_task_id)
    [ -z "$task_id" ] && exit 0
    
    local windows=$(tmux list-windows -t "$SESSION_NAME" -F "#{window_name}" 2>/dev/null | grep "^${task_id}-")
    
    if [ -z "$windows" ]; then
        gum style --foreground 196 "No sessions found for $task_id"
    else
        gum style --border rounded --padding 1 "Sessions for $task_id:"
        echo "$windows" | while read -r window; do
            local mode=${window#*-}
            gum style --foreground 82 "• $mode mode"
        done
    fi
}

# Main menu
main_menu() {
    while true; do
        local action=$(gum choose --header "What would you like to do?" \
            "Dispatch new session" \
            "Start from existing worktree" \
            "List active sessions" \
            "Check task status" \
            "Stop a session" \
            "Attach to session" \
            "Exit")
        
        case "$action" in
            "Dispatch new session")
                interactive_dispatch
                ;;
            "Start from existing worktree")
                start_from_worktree
                ;;
            "List active sessions")
                list_active
                gum input --placeholder "Press Enter to continue"
                ;;
            "Check task status")
                quick_status
                gum input --placeholder "Press Enter to continue"
                ;;
            "Stop a session")
                local windows=$(tmux list-windows -t "$SESSION_NAME" -F "#{window_name}" 2>/dev/null)
                if [ -z "$windows" ]; then
                    gum style --foreground 196 "No active sessions"
                else
                    local window=$(echo "$windows" | gum choose --header "Select session to stop:")
                    if [ ! -z "$window" ]; then
                        if gum confirm "Stop session $window?"; then
                            tmux kill-window -t "$SESSION_NAME:$window"
                            gum style --foreground 82 "Session stopped"
                        fi
                    fi
                fi
                ;;
            "Attach to session")
                attach_session
                ;;
            "Exit")
                break
                ;;
        esac
    done
}

# Start a session from an existing worktree
start_from_worktree() {
    gum style --border double --padding 1 --width 50 \
        "Start Session from Existing Worktree"
    
    # Get list of worktrees and extract the task IDs
    local worktrees_dir="${HOME}/Projects/roo-task-cli.worktrees"
    
    if [ ! -d "$worktrees_dir" ]; then
        gum style --foreground 196 "No worktrees directory found at: $worktrees_dir"
        return 1
    fi
    
    # List directories in worktrees folder
    local worktrees=$(ls -1 "$worktrees_dir" 2>/dev/null)
    
    if [ -z "$worktrees" ]; then
        gum style --foreground 196 "No worktrees found"
        return 1
    fi
    
    # Let user select a worktree
    local selected_task=$(echo "$worktrees" | gum choose --header "Select a worktree:")
    
    if [ -z "$selected_task" ]; then
        return 0
    fi
    
    # Select mode
    local mode=$(select_mode)
    [ -z "$mode" ] && return 0
    
    # Get optional user prompt
    local user_prompt=$(get_user_prompt "$mode")
    
    # Create window directly with the existing worktree
    local window_name="${selected_task}-${mode}"
    local worktree_path="$worktrees_dir/$selected_task"
    
    # Check if window already exists
    if tmux list-windows -t "$SESSION_NAME" -F "#{window_name}" | grep -q "^${window_name}$"; then
        gum style --foreground 214 "Window already exists: $window_name"
        
        if gum confirm "Switch to existing window?"; then
            tmux select-window -t "$SESSION_NAME:${window_name}"
            return 0
        else
            return 1
        fi
    else
        gum style --border normal --padding 1 \
            "$(echo -e "Task: $selected_task\nMode: $mode\nPath: $worktree_path\nInstructions: ${user_prompt:-[none]}")"
        
        if gum confirm "Create session?"; then
            create_or_get_session
            
            # Create window with channelcoder command
            if [ "$mode" = "none" ]; then
                tmux new-window -t "$SESSION_NAME" -n "$window_name" -c "$worktree_path" "claude"
            else
                tmux new-window -t "$SESSION_NAME" -n "$window_name" -c "$worktree_path" \
                    "channelcoder .tasks/.modes/$mode/base.md -d mode=\"$mode\" -d taskId=\"$selected_task\" -d additionalInstructions=\"$user_prompt\""
            fi
            
            # Disable automatic window renaming
            tmux set-window-option -t "$SESSION_NAME:$window_name" automatic-rename off
            tmux set-window-option -t "$SESSION_NAME:$window_name" allow-rename off
            
            gum style --foreground 82 "✓ Session created successfully"
            
            if gum confirm "Attach to session now?"; then
                attach_session
            fi
        fi
    fi
}

# Main entry point
main() {
    check_gum
    check_tmux
    check_channelcoder
    
    # If no arguments, show interactive menu
    if [ $# -eq 0 ]; then
        main_menu
    else
        # Legacy command line interface for compatibility
        case "$1" in
            "list")
                list_active
                ;;
            "worktree"|"wt")
                start_from_worktree
                ;;
            "help"|"-h"|"--help")
                gum style --border normal --padding 1 \
                    "$(echo -e "Usage:\n  $0                    # Interactive menu\n  $0 list              # List sessions\n  $0 worktree          # Start session from existing worktree\n  $0 <mode> <id>       # Direct dispatch")"
                ;;
            *)
                # Direct dispatch with command line args
                if [ $# -lt 2 ]; then
                    gum style --foreground 196 "Error: Missing arguments"
                    exit 1
                fi
                create_or_get_session
                create_window "$1" "$2" "${@:3}"
                ;;
        esac
    fi
}

# Run the script
main "$@"