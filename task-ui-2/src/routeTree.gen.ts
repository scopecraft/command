/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WorkflowIndexImport } from './routes/workflow/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as ParentsIndexImport } from './routes/parents/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkflowIndexRoute = WorkflowIndexImport.update({
  id: '/workflow/',
  path: '/workflow/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const ParentsIndexRoute = ParentsIndexImport.update({
  id: '/parents/',
  path: '/parents/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/parents/': {
      id: '/parents/'
      path: '/parents'
      fullPath: '/parents'
      preLoaderRoute: typeof ParentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
    '/workflow/': {
      id: '/workflow/'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof WorkflowIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/parents': typeof ParentsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/workflow': typeof WorkflowIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/parents/': typeof ParentsIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/workflow/': typeof WorkflowIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/parents' | '/tasks' | '/workflow'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/parents' | '/tasks' | '/workflow'
  id: '__root__' | '/' | '/parents/' | '/tasks/' | '/workflow/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ParentsIndexRoute: typeof ParentsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  WorkflowIndexRoute: typeof WorkflowIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ParentsIndexRoute: ParentsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  WorkflowIndexRoute: WorkflowIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/parents/",
        "/tasks/",
        "/workflow/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/parents/": {
      "filePath": "parents/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    },
    "/workflow/": {
      "filePath": "workflow/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
